package types

import (
	<%= if (len(params) > 0) { %>"fmt"<% } %>
)

<%= for (param) in params { %>
var (
	Key<%= param.Name.UpperCamel %> = []byte("<%= param.Name.UpperCamel %>")<%= if (param.DataType() == "string") { %>
	// TODO: Determine the default value
	Default<%= param.Name.UpperCamel %> <%= param.DataType() %> = "<%= param.Name.Snake %>"<% } else { %>
	// TODO: Determine the default value
	Default<%= param.Name.UpperCamel %> <%= param.DataType() %> = <%= param.ValueIndex() %><% } %>
)
<% } %>

// NewParams creates a new Params instance
func NewParams(<%= for (param) in params { %>
	<%= param.Name.LowerCamel %> <%= param.DataType() %>,<% } %>
) Params {
	return Params{<%= for (param) in params { %>
        <%= param.Name.UpperCamel %>: <%= param.Name.LowerCamel %>,<% } %>
	}
}

// DefaultParams returns a default set of parameters
func DefaultParams() Params {
	return NewParams(<%= for (param) in params { %>
        Default<%= param.Name.UpperCamel %>,<% } %>
	)
}

// Validate validates the set of params
func (p Params) Validate() error {<%= for (param) in params { %>
   	if err := validate<%= param.Name.UpperCamel %>(p.<%= param.Name.UpperCamel %>); err != nil {
   		return err
   	}
   	<% } %>
	return nil
}

<%= for (param) in params { %>
// validate<%= param.Name.UpperCamel %> validates the <%= param.Name.UpperCamel %> param
func validate<%= param.Name.UpperCamel %>(v interface{}) error {
	<%= param.Name.LowerCamel %>, ok := v.(<%= param.DataType() %>)
	if !ok {
		return fmt.Errorf("invalid parameter type: %T", v)
	}

	// TODO implement validation
	_ = <%= param.Name.LowerCamel %>

	return nil
}
<% } %>